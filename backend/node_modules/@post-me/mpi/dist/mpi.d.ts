export interface Communicator {
    rank(): number;
    size(): number;
    send<T = any>(data: T, destination: number, tag: number, transfer?: Transferable[]): Promise<void>;
    recv<T = any>(source: number, tag: number): Promise<T>;
    bcast<T = any>(data: T | null, root: number): Promise<T>;
    barrier(): Promise<void>;
    scatter<T extends ArrayLike>(data: T | null, root: number): Promise<T>;
    gather<T extends ArrayLike>(data: T, root: number): Promise<T | null>;
    allGather<T extends ArrayLike>(data: T): Promise<T>;
    reduce<T = any>(data: T, reducer: (a: T, b: T) => T, root: number): Promise<T | null>;
    allReduce<T = any>(data: T, reducer: (a: T, b: T) => T): Promise<T>;
}
export declare type ArrayLike = Array<any> | Uint8Array | Uint16Array | Uint32Array | BigUint64Array | Int8Array | Int16Array | Int32Array | BigInt64Array | Float32Array | Float64Array | Uint8ClampedArray;
export declare type Send = Communicator['send'];
export declare type Recv = Communicator['recv'];
export declare type Bcast = Communicator['bcast'];
export declare type Barrier = Communicator['barrier'];
export declare type Scatter = Communicator['scatter'];
export declare type Gather = Communicator['gather'];
export declare type AllGather = Communicator['allGather'];
export declare type Reduce = Communicator['reduce'];
export declare type AllReduce = Communicator['allReduce'];
declare type CollectiveOpBuilder<Op extends (...args: any[]) => Promise<any>> = (rank: number, size: number, send: Send, recv: Recv) => Op;
export declare const buildBarrier: CollectiveOpBuilder<Barrier>;
export declare const buildBcast: CollectiveOpBuilder<Bcast>;
export declare const buildScatter: CollectiveOpBuilder<Scatter>;
export declare const buildGather: CollectiveOpBuilder<Gather>;
export declare const buildAllGather: CollectiveOpBuilder<AllGather>;
export declare const buildReduce: CollectiveOpBuilder<Reduce>;
export declare const buildAllReduce: CollectiveOpBuilder<AllReduce>;
export {};
