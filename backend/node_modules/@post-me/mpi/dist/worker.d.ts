import { MethodsType, Callable, ValueOrPromise, InnerType } from 'post-me';
import { Communicator } from './mpi';
export declare type InitMethods = {
    initComm(rank: number, ports: (MessagePort | undefined)[]): Promise<void>;
};
export declare type ParallelMethod<F extends Callable<any, any>> = (comm: Communicator) => Callable<Parameters<F>, ValueOrPromise<InnerType<ReturnType<F>>>>;
export declare type ParallelMethods<M extends MethodsType> = {
    [K in keyof M]: ParallelMethod<M[K]>;
};
export interface PoolConnection<M extends MethodsType = any> {
    registerMethods(methods: ParallelMethods<M>): void;
    registerMethod<K extends keyof M>(methodName: K, method: ParallelMethod<M[K]>): void;
    setReturnTransfer<K extends keyof M>(methodName: K, transfer: (result: InnerType<ReturnType<M[K]>>) => Transferable[]): void;
}
export declare function joinPool(workerScope: any): Promise<PoolConnection>;
